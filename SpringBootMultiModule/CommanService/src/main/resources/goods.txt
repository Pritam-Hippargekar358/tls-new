public class ConciseMethodsGoodPractice {

    public void processOrder(Order order) {
        validateOrder(order);
        calculateOrderTotal(order);
        saveOrder(order);
    }

    private void validateOrder(Order order) {
        if (Objects.isNull(order)) {
            throw new IllegalArgumentException("Order cannot be null");
        }
        if (Objects.isNull(order.getItems()) || order.getItems().isEmpty()) {
            throw new IllegalArgumentException("Order must have at least one item");
        }
        if (Objects.isNull(order.getCustomer())) {
            throw new IllegalArgumentException("Order must have a customer");
        }

        for (OrderItem item : order.getItems()) {
            if (item.quantity() <= 0) {
                throw new IllegalArgumentException("Item quantity must be greater than zero");
            }
            if (item.price() < 0) {
                throw new IllegalArgumentException("Item price cannot be negative");
            }
        }
    }

    private void calculateOrderTotal(Order order) {
        double subtotal = 0;
        for (OrderItem item : order.getItems()) {
            double itemTotal = item.quantity() * item.price();
            subtotal += itemTotal;
        }
        double tax = subtotal * 0.1; // Example tax calculation
        double discount = subtotal > 100 ? 10 : 0; // Example discount logic
        double total = subtotal + tax - discount;

        order.setSubTotal(subtotal);
        order.setTax(tax);
        order.setDiscount(discount);
        order.setTotal(total);
    }

    private void saveOrder(Order order) {
        System.out.println("Saving order to the database...");
        System.out.println("Order Details:");
        System.out.println("Customer: " + order.getCustomer().name());
        System.out.println("Subtotal: $" + order.getSubTotal());
        System.out.println("Tax: $" + order.getTax());
        System.out.println("Discount: $" + order.getDiscount());
        System.out.println("Total: $" + order.getTotal());
        System.out.println("Order saved successfully.");
    }

    public static class Order {
        private List<OrderItem> items;
        private Customer customer;
        private double subTotal;
        private double tax;
        private double discount;
        private double total;

        // constructor, getters and setters
    }

    public record OrderItem(String name, int quantity, double price) {}

    public record Customer(String name) {}

}


public interface CreateGroup {}
public interface UpdateGroup {}

public class User {

    @NotNull(message = "Username is required.", groups = CreateGroup.class)
    @Pattern(regexp = "^[a-zA-Z0-9_]+$", message = "Username must be alphanumeric.", groups = UpdateGroup.class)
    private String username;

}
@RestController
@RequestMapping("/users")
public class UserController {

    @PostMapping
    public ResponseEntity<String> createUser(@Validated(CreateGroup.class) @RequestBody User user) {
        return ResponseEntity.ok("User created!");
    }

    @PutMapping
    public ResponseEntity<String> updateUser(@Validated(UpdateGroup.class) @RequestBody User user) {
        return ResponseEntity.ok("User updated!");
    }

}

You can leverage cross-field validation
Field-level constraints don’t have access to other fields in the object. To compare fields (e.g., password and confirmPassword), use a class-level annotation.
Scenario: Ensure startDate is before endDate — annotation definition:
@Documented
@Constraint(validatedBy = DateRangeValidator.class)
@Target(ElementType.TYPE) // Applied at the class level
@Retention(RetentionPolicy.RUNTIME)
public @interface ValidDateRange {

    String message() default "Start date must be before end date.";

    Class<?>[] groups() default {};

    Class<? extends Payload>[] payload() default {};

}
Validator implementation:

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import java.time.LocalDate;

public class DateRangeValidator implements ConstraintValidator<ValidDateRange, Event> {

    @Override
    public boolean isValid(Event event, ConstraintValidatorContext context) {
        if (event.getStartDate() == null || event.getEndDate() == null) {
            return true; // Let @NotNull handle null cases if needed
        }

        return event.getStartDate().isBefore(event.getEndDate());
    }

}
Usage in POJO:
@ValidDateRange
public class Event {
    private LocalDate startDate;
    private LocalDate endDate;

    // getters and setters
}