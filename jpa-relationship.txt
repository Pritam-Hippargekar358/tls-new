@OneToOne – The default fetch type is EAGER.
@OneToMany – The default fetch type is LAZY.
@ManyToOne – The default fetch type is EAGER.
@ManyToMany – The default fetch type is LAZY.
------------------------------------------------------------------------------------------------------
-----------------------------------------@ManyToMany----------------------------------------
------------------------------------------------------------------------------------------------------
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    last_name VARCHAR(255),
    first_name VARCHAR(255),
    CONSTRAINT pk_users PRIMARY KEY (id)
);

CREATE TABLE profiles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    join_date date,
    status VARCHAR(255),
    bio VARCHAR(255),
    CONSTRAINT pk_profiles PRIMARY KEY (id)
);

CREATE TABLE profiles_users (
    profile_id BIGINT NOT NULL,
    users_id BIGINT NOT NULL,
    CONSTRAINT pk_profiles_users PRIMARY KEY (profile_id, users_id)
);

ALTER TABLE profiles_users
    ADD CONSTRAINT fk_prouse_on_profile FOREIGN KEY (profile_id) REFERENCES profiles (id);

ALTER TABLE profiles_users
    ADD CONSTRAINT fk_prouse_on_user FOREIGN KEY (users_id) REFERENCES users (id);

@Entity
@Table(name = "users")
public class User {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   @Column(name = "id", nullable = false)
   private Long id;

   @ManyToMany
   @JoinTable(name = "profiles_users",
      joinColumns = @JoinColumn(name = "users_id"),
      inverseJoinColumns = @JoinColumn(name = "profile_id"))
   private Set<Profile> profiles = new LinkedHashSet<>();

   //...
}

@Entity
@Table(name = "profiles")
public class Profile {
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   @Column(name = "id", nullable = false)
   private Long id;

   @ManyToMany(mappedBy = "profiles")
   private Set<User> users = new LinkedHashSet<>();

   //...
}

------------------------------------------------------------------------------------------------------
------------------------------------------@OneToOne------------------------------------------
------------------------------------------------------------------------------------------------------
Case 1:
  CREATE TABLE users (
      id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
      last_name  VARCHAR(255),
      first_name VARCHAR(255),
      CONSTRAINT pk_users PRIMARY KEY (id)
  );
CREATE TABLE profiles (
      id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,    
      user_id BIGINT,
      status    VARCHAR(255),
      bio       VARCHAR(255),
	  join_date date,
      CONSTRAINT pk_profiles PRIMARY KEY (id)
  );

ALTER TABLE profiles
ADD CONSTRAINT uc_profiles_user UNIQUE (user_id);

ALTER TABLE profiles
ADD CONSTRAINT FK_PROFILES_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);

@Entity
@Table(name = "users")
public class User {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "id", nullable = false)
  private Long id;

  @OneToOne(mappedBy = "user")
  @JsonManagedReference
  private Profile profile;
}

@Entity
@Table(name = "profiles")
public class Profile {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "id", nullable = false)
  private Long id;

  @OneToOne
  @JoinColumn(name = "user_id")
  @JsonBackReference // Jackson annotation to avoid circular references during serialization
  private User user;
}

→ This @JoinColumn annotation is used on the owning side of the table association to define the foreign key column name and other attributes which are related to the join column. 
The Profile entity is the owning side because it has the foreign key user_id

→ The mappedBy attribute is used to specify the referencing side (non-owning side) of the relationship.
The User entity is the non-owning side and does not manage the foreign key.

Case 2:
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    last_name VARCHAR(255),
    first_name VARCHAR(255),
    CONSTRAINT pk_users PRIMARY KEY (id)
);

CREATE TABLE profiles (
    user_id BIGINT NOT NULL,
    status VARCHAR(255),
    bio VARCHAR(255),
    join_date date,
    CONSTRAINT pk_profiles PRIMARY KEY (user_id)
);

ALTER TABLE profiles
ADD CONSTRAINT FK_PROFILES_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);


@Entity
@Table(name = "users")
public class User {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "id", nullable = false)
  private Long id;

  @OneToOne(fetch = FetchType.LAZY, mappedBy = "user")
  private Profile profile;

  //...
}

@Entity
@Table(name = "profiles")
public class Profile {
  @Id
  @Column(name = "id", nullable = false, updatable = false, unique = true)
  private Long id;

  @MapsId
  @OneToOne(fetch = FetchType.LAZY, optional = false)
  @JoinColumn(name = "user_id", nullable = false)
  private User user;

  //...
}
------------------------------------------------------------------------------------------------------
----------------------------@OneToMany&@ManyToOne---------------------------------
------------------------------------------------------------------------------------------------------
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    last_name VARCHAR(255),
    first_name VARCHAR(255),
    CONSTRAINT pk_users PRIMARY KEY (id)
);

CREATE TABLE profiles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    join_date date,
    status VARCHAR(255),
    bio VARCHAR(255),
    user_id BIGINT,
    CONSTRAINT pk_profiles PRIMARY KEY (id)
);

ALTER TABLE profiles
ADD CONSTRAINT FK_PROFILES_ON_USER FOREIGN KEY (user_id) REFERENCES users (id);	
	
@Entity
@Table(name = "users")
public class User {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "id", nullable = false)
  private Long id;

  @OneToMany(mappedBy = "user")
  @JsonIgnoreProperties("user")
  private Set<Profile> profiles = new LinkedHashSet<>();

  //...
}

@Entity
@Table(name = "profiles")
public class Profile {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "id", nullable = false)
  private Long id;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "user_id")
  @JsonIgnoreProperties("profiles")
  private User user;

  //...
}	