Client Certificate - Private Key
$ openssl genrsa -aes256 -out client.key 2048

Request for a CSR
$ openssl req -new -sha256 -key client.key -out client.csr
	Country Name=PH
	State/Province=Laguna
	Locality=Filipino
	Organization Name=Czetsuya Tech
	Organizational Unit=IT
	Common Name=localhost
	Email Address=czetsuya@gmail.com
	It will ask for the client's password; use the default one. It will also ask for a challenge password and an optional company name that you can leave blank.
	
Sign the Client Certificate	
$ openssl x509 -req -in client.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out client.pem -days 365 -sha256

$ openssl pkcs12 -export -in client.pem -out client.p12 -name client -nodes -inkey client.key


A Keystore is used to store the server's private key and own identity certificate 
whereas A Truststore is used for storage of certificates from the trusted Certificate Authority(CA).

Keystores are used by the server for communications, 
while Truststores are used to verify the server certificates before communication, to allow handshakes.

@Configuration
public class RestTemplateConfig {

	@Value("${application.keystore.path}")
	private String keystorePath;

	@Value("${application.keystore.type}")
	private String keystoreType;

	@Value("${application.keystore.password}")
	private String keystorePassword;

	@Value("${application.truststore.path}")
	private String truststorePath;

	@Value("${application.truststore.type}")
	private String truststoreType;

	@Value("${application.truststore.password}")
	private String truststorePassword;

	@Value("${application.protocol}")
	private String protocol;

	@Value("${api.rapid-api.host}")
	private String rapidApiHost;

	@Value("${api.rapid-api.key}")
	private String rapidApiKey;

	@Bean
	public RestTemplate restTemplate(RestTemplateBuilder builder) {
		return builder
				.setConnectTimeout(Duration.ofMillis(60000))
				.setReadTimeout(Duration.ofMillis(60000))
				.build();
	}

	@Bean(name = "rapidApiRestTemplate")
	public RestTemplate rapidApiRestTemplate()
			throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException {
		HttpComponentsClientHttpRequestFactory clientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory();

		// Connect timeout
		clientHttpRequestFactory.setConnectTimeout(60000);

		// Read timeout
		clientHttpRequestFactory.setReadTimeout(60000);

		RestTemplate restTemplate = new RestTemplate(clientHttpRequestFactory);

		// Interceptor section
		List<ClientHttpRequestInterceptor> interceptors = restTemplate.getInterceptors();
		if (CollectionUtils.isEmpty(interceptors)) {
			interceptors = new ArrayList<ClientHttpRequestInterceptor>();
		}
		interceptors.add(new HttpClientRequestInterceptor("x-rapidapi-key", rapidApiKey));
		interceptors.add(new HttpClientRequestInterceptor("x-rapidapi-host", rapidApiHost));
		restTemplate.setInterceptors(interceptors);

		return restTemplate;
		
	}

	@Bean(name = "mutualAuthRestTemplate")
	public RestTemplate mutualAuthRestTemplate() throws KeyStoreException, NoSuchAlgorithmException,
			CertificateException, IOException, KeyManagementException {

		// Load Keystore
		final KeyStore keystore = KeyStore.getInstance(keystoreType);
		try (InputStream in = new FileInputStream(keystorePath)) {
			keystore.load(in, keystorePassword.toCharArray());
		}

		// Load Truststore
		final KeyStore truststore = KeyStore.getInstance(truststoreType);
		try (InputStream in = new FileInputStream(truststorePath)) {
			truststore.load(in, truststorePassword.toCharArray());
		}

		// Build SSLConnectionSocket to verify certificates
		final SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(new SSLContextBuilder()
				.loadTrustMaterial(truststore, new TrustSelfSignedStrategy()).setProtocol(protocol).build(),
				new HostnameVerifier() {
					HostnameVerifier hostnameVerifier = HttpsURLConnection.getDefaultHostnameVerifier();

					@Override
					public boolean verify(String hostname, SSLSession session) {
						return hostnameVerifier.verify(hostname, session);
					}
				});

		CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(sslSocketFactory).build();
		return new RestTemplate(new HttpComponentsClientHttpRequestFactory(httpclient));
	}
}


Server application.properties:
server.port=8443
server.ssl.key-store=classpath:cert/server.p12
server.ssl.key-store-password=[server_keystore_password]
server.ssl.key-store-type=PKCS12
server.ssl.client-auth=NEED
server.ssl.trust-store=classpath:cert/truststore.p12
server.ssl.trust-store-password=password
server.ssl.trust-store-type=PKCS12

Client application.properties:
client.ssl.key-store=classpath:cert/client.p12
client.ssl.key-store-password=[client_keystore_password]
client.ssl.trust-store=classpath:cert/truststore.p12
client.ssl.trust-store-password=password
Client-Side RestTemplate Configuration for mTLS
On the client side, the RestTemplate bean needs to be configured to support mTLS with the necessary SSL context. Below is the configuration class that sets up the RestTemplate:

@Configuration
public class RestClientConfig {

    // Load keystore and truststore locations and passwords
    @Value("${client.ssl.trust-store}")
    private Resource trustStore;
    @Value("${client.ssl.key-store}")
    private Resource keyStore;
    @Value("${client.ssl.trust-store-password}")
    private String trustStorePassword;
    @Value("${client.ssl.key-store-password}")
    private String keyStorePassword;

    @Bean
    public RestTemplate restTemplate() throws Exception {
        // Set up SSL context with truststore and keystore
        SSLContext sslContext = new SSLContextBuilder()
                .loadKeyMaterial(
                        keyStore.getURL(),
                        keyStorePassword.toCharArray(),
                        keyStorePassword.toCharArray()
                )
                .loadTrustMaterial(
                        trustStore.getURL(),
                        trustStorePassword.toCharArray()
                )
                .build();

        // Configure the SSLConnectionSocketFactory to use NoopHostnameVerifier
        SSLConnectionSocketFactory sslConFactory = new SSLConnectionSocketFactory(sslContext, new NoopHostnameVerifier());

        // Use a connection manager with the SSL socket factory
        HttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder.create()
                .setSSLSocketFactory(sslConFactory)
                .build();

        // Build the CloseableHttpClient and set the connection manager
        CloseableHttpClient httpClient = HttpClients.custom()
                .setConnectionManager(cm)
                .build();

        // Set the HttpClient as the request factory for the RestTemplate
        ClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);

        return new RestTemplate(requestFactory);
    }
}


@Configuration
public class RestClientConfig {

    private static final String PKCS12_FILE_PATH = "yourpath\\badssl.com-client.p12";
    private static final String PKCS12_PASSWORD = "badssl.com";
    private static final String TRUSTSTORE_FILE_PATH = "yourpath\\truststore.jks";
    private static final String TRUSTSTORE_PASSWORD = "password";

    @Bean
    public RestTemplate restTemplate() {
        SSLContext sslContext = configureSSLContext();
        return new RestTemplate(createRequestFactory(sslContext));
    }

    private SSLContext configureSSLContext() {
        try {
            SSLContext sslContext = SSLContext.getInstance("TLS");

            KeyStore keyStore = KeyStore.getInstance("PKCS12");
            char[] keyStorePassword = PKCS12_PASSWORD.toCharArray();
            keyStore.load(new FileInputStream(PKCS12_FILE_PATH), keyStorePassword);

            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
            keyManagerFactory.init(keyStore, keyStorePassword);

            KeyStore trustStore = KeyStore.getInstance("JKS");
            char[] trustStorePassword = TRUSTSTORE_PASSWORD.toCharArray();
            trustStore.load(new FileInputStream(TRUSTSTORE_FILE_PATH), trustStorePassword);

            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
            trustManagerFactory.init(trustStore);

            sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);

            return sslContext;
        } catch (NoSuchAlgorithmException | KeyStoreException | CertificateException | IOException | UnrecoverableKeyException | KeyManagementException e) {
            throw new RuntimeException("Error configuring SSLContext", e);
        }
    }

    private ClientHttpRequestFactory createRequestFactory(SSLContext sslContext) {
        return new CustomRequestFactory(sslContext);
    }

    private static class CustomRequestFactory extends SimpleClientHttpRequestFactory {

        private final SSLContext sslContext;

        public CustomRequestFactory(SSLContext sslContext) {
            this.sslContext = sslContext;
        }

        @Override
        protected void prepareConnection(java.net.HttpURLConnection connection, String httpMethod) throws IOException {
            if (connection instanceof javax.net.ssl.HttpsURLConnection) {
                ((javax.net.ssl.HttpsURLConnection) connection).setSSLSocketFactory(sslContext.getSocketFactory());
            }
            super.prepareConnection(connection, httpMethod);
        }
    }
}